#!/usr/bin/env node

const program = require('commander')
const exists = require('fs').existsSync
const rm = require('rimraf').sync
const path = require('path')
const inquirer = require('inquirer')
const ora = require('ora')
const home = require('user-home')
const logger = require('../lib/logger')
const generate = require('../lib/generate')
const chalk = require('chalk')
const checkVersion = require('../lib/check-version')
const download = require('git-clone')
const spawn = require('child_process').spawn;

/**
 * Usage.
 */

program
  .usage('[project-name]')

/**
 * Help.
 */

program.on('--help', () => {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with an remote template'))
  console.log('    $ test-tool init my-project')
  console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Padding.
 */

console.log()
process.on('exit', () => {
  console.log()
})


let template = 'test-tool-templates'
const tmp = path.join(home, '.test-tool-templates', template)
const rawName = program.args[0]
const inPlace = !rawName || rawName === '.'
const name = inPlace ? path.relative('../', process.cwd()) : rawName
const to = path.resolve(rawName || '.')

if (inPlace || exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }]).then(answers => {
    if (answers.ok) {
      run()
    }
  }).catch(logger.fatal)
} else {
  run()
}

function run () {
  checkVersion(() => {
    downloadAndGenerate()
  })
}



/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate () {
  const spinner = ora('downloading template')
  spinner.start()
  if (exists(tmp)) rm(tmp)
  download('git@github.com:Yage-h/test-tool.git', tmp, { checkout: 'master' }, err => {
    spinner.stop()
    if (err) logger.fatal('Failed to download repo ' + ': ' + err.message.trim())
    generate(name, tmp, to, err => {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  })
}